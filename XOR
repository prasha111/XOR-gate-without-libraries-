import numpy as np

def sigmoid(x):
   return 1 / (1 + np.exp(-2 * x))


def der(x):
	return x * (1 - x)


def feedforwardpropagation(input_layer, output_layer, hidden_weights, output_weights, bias):
	z2 = np.dot(input_layer, hidden_weights)
	a2 = sigmoid(z2)
	a2= a2.T
	a2 = np.vstack((a2, bias)).T
	z3 = np.dot(a2, output_weights)
	a3 = sigmoid(z3)
	return a2, a3, hidden_weights, output_weights


def backpropogation(input_layer, output_layer, hidden_weights, output_weights, bias, n):
	for _ in range(n):
		a2, a3, hidden_weights, output_weights = feedforwardpropagation( input_layer, output_layer, hidden_weights, output_weights, bias)
		del_a3 = output_layer - a3
		del_a2 = np.dot(del_a3, output_weights[0:2, :].T) * \
		    sigmoid(np.dot(input_layer, hidden_weights))


		delta_a3 = del_a3 * der(a3)
		delta_a2 = del_a2 * der(a2[:, 0:2])

		output_weights += np.dot(a2.T, delta_a3)
		hidden_weights += np.dot(input_layer.T, delta_a2)

	return a3



input_layer = np.array([[0, 0, 1], [0, 1, 1], [1, 0, 1], [1, 1, 1]])
output_layer =np.array([[0, 1, 1, 0]]).T

np.random.seed(4)
hidden_weights = np.random.random((3,2))
output_weights = np.random.random((3, 1))

n = 100000

bias = np.ones((1, 4))

print(backpropogation(input_layer, output_layer, hidden_weights, output_weights, bias, n))
